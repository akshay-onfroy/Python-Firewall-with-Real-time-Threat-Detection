import os
import sys
import time
import socket
import random
import argparse
from scapy.all import *
import config

def parse_arguments():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Enhanced Firewall Penetration Testing Tool')
    parser.add_argument('--target', type=str, default='127.0.0.1',
                      help='Target IP address (default: 127.0.0.1)')
    parser.add_argument('--timeout', type=float, default=1.0,
                      help='Timeout for connection attempts (default: 1.0 sec)')
    return parser.parse_args()

def test_port_connectivity(target, port, timeout, protocol='tcp'):
    """Test if a port is open"""
    if protocol.lower() == 'tcp':
        return test_tcp_port(target, port, timeout)
    elif protocol.lower() == 'udp':
        return test_udp_port(target, port, timeout)
    return False

def test_tcp_port(target, port, timeout):
    """Test TCP port connectivity"""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(timeout)
        result = s.connect_ex((target, port))
        s.close()
        return result == 0
    except:
        return False

def test_udp_port(target, port, timeout):
    """Test UDP port connectivity"""
    try:
        response = sr1(IP(dst=target)/UDP(dport=port), timeout=timeout, verbose=0)
        if response is None:
            return True 
        elif response.haslayer(ICMP):
            return False 
        return True
    except:
        return False

def icmp_ping_test(target, timeout=1.0):
    """Test basic ICMP ping"""
    response = sr1(IP(dst=target)/ICMP(), timeout=timeout, verbose=0)
    if response:
        print("✓ Target responds to normal ping")
        return True
    print("✗ Target does not respond to ping")
    return False

def run_icmp_flood_test(target):
    """Enhanced ICMP flood detection"""
    log_files = [
        '/var/log/syslog',
        '/var/log/kern.log',
        '/var/log/messages',
        config.LOG_FILE
    ]
    
    # Send flood (50 packets)
    send(IP(dst=target)/ICMP(), count=50, verbose=0)
    time.sleep(2)
    
    # Check all possible log locations
    detected = False
    for log_file in log_files:
        if os.path.exists(log_file):
            with open(log_file, 'r') as f:
                content = f.read()
                if "ICMP_FLOOD" in content or "ICMP FLOOD" in content:
                    print(f"✓ Flood detected in {log_file}")
                    detected = True
                    break
    
    if not detected:
        print("✗ No flood detection found. Checking current rules...")
        os.system("sudo iptables-legacy -vL INPUT -n | grep icmp")
    
    return detected

def port_scan(target, timeout):
    """Complete port scanning"""
    print("\n[Port Configuration Test]")
    
    # Test allowed services
    open_ports = []
    for service in config.ALLOWED_SERVICES:
        port = service['port']
        if test_port_connectivity(target, port, timeout, service['protocol']):
            print(f"✓ Port {port} ({service['name']}) is open")
            open_ports.append(port)
        else:
            print(f"✗ Port {port} ({service['name']}) should be open but is closed")
    
    # Test blocked ports
    blocked_ports = []
    for port in config.BLOCKED_PORTS:
        if test_port_connectivity(target, port, timeout):
            print(f"✗ Port {port} should be blocked but is open")
        else:
            print(f"✓ Port {port} is properly blocked")
            blocked_ports.append(port)
    
    return open_ports, blocked_ports

def main():
    args = parse_arguments()
    print("\n[Comprehensive Firewall Test]")
    
    # Port tests
    open_ports, blocked_ports = port_scan(args.target, args.timeout)
    
    # ICMP tests
    icmp_results = {
        'flood_detected': run_icmp_flood_test(args.target),
        'basic_ping': icmp_ping_test(args.target, args.timeout)
    }
    
    print("\n[Test Results]")
    print(f"Allowed Services: {len(open_ports)}/{len(config.ALLOWED_SERVICES)} working")
    print(f"Blocked Ports: {len(blocked_ports)}/{len(config.BLOCKED_PORTS)} effective")
    print(f"ICMP Protection: {'Working' if icmp_results['flood_detected'] else 'Failed'}")

    total = len(config.ALLOWED_SERVICES) + len(config.BLOCKED_PORTS) + 1
    passed = len(open_ports) + len(blocked_ports) + (1 if icmp_results['flood_detected'] else 0)
    score = (passed / total) * 100
    
    print(f"\nSecurity Score: {score:.1f}%")
    print("Status: " + ("SECURE" if score >= 90 else "MODERATE" if score >= 70 else "WEAK"))

if __name__ == "__main__":
    main()
